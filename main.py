import os
import time
import requests
import warnings
import hashlib
import random
import re
import json
import threading
from datetime import datetime, timedelta
from flask import Flask, request, jsonify, render_template_string
from flask_cors import CORS
from openai import OpenAI

warnings.filterwarnings('ignore')

app = Flask(__name__)
CORS(app)

# Configura√ß√£o OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
OPENAI_MODEL = "gpt-4o-mini"

# Inicializa cliente OpenAI apenas se a chave existir
if OPENAI_API_KEY:
    try:
        client = OpenAI(api_key=OPENAI_API_KEY)
        print("‚úÖ Cliente OpenAI inicializado com sucesso")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao inicializar OpenAI: {e}")
        client = None
else:
    client = None
    print("‚ö†Ô∏è OPENAI_API_KEY n√£o configurada - modo fallback ativo")

RENDER_URL = os.getenv("RENDER_URL", "")

# Cache e dados
CACHE_RESPOSTAS = {}
KNOWLEDGE_BASE = {}
HISTORICO_CONVERSAS = []
PING_INTERVAL = 300

# Lock para thread safety
historico_lock = threading.Lock()

# Auto-ping para manter servidor ativo
def auto_ping():
    while True:
        try:
            if RENDER_URL:
                # Garante que a URL tem o protocolo
                url = RENDER_URL if RENDER_URL.startswith('http') else f"https://{RENDER_URL}"
                response = requests.get(f"{url}/health", timeout=10)
                print(f"üèì Auto-ping OK [{response.status_code}]: {datetime.now().strftime('%H:%M:%S')}")
            else:
                # Se RENDER_URL n√£o estiver configurada, pinga localhost
                requests.get("http://localhost:5000/health", timeout=5)
                print(f"üèì Auto-ping local: {datetime.now().strftime('%H:%M:%S')}")
        except Exception as e:
            print(f"‚ùå Erro auto-ping: {e}")
        time.sleep(PING_INTERVAL)

threading.Thread(target=auto_ping, daemon=True).start()

# =============================================================================
# SISTEMA ANTI-ALUCINA√á√ÉO - VALIDA√á√ÉO DE RESPOSTAS
# =============================================================================

# Informa√ß√µes OFICIAIS da NatanDEV (fonte da verdade)
INFORMACOES_OFICIAIS = {
    "criador": "Natan Borges Alves Nascimento",
    "profissao": "Web Developer Full-Stack",
    "localizacao": "Rio de Janeiro, Brasil",
    "atendimento": "Todo o Brasil (remoto)",
    "whatsapp": "(21) 99282-6074",
    "instagram": "@nborges.ofc",
    "email": "borgesnatan09@gmail.com",
    "site": "natansites.com.br",
    "portfolio": "natandev02.netlify.app",
    "github": "github.com/natsongamesoficial551",
    "linkedin": "linkedin.com/in/natan-borges-b3a3b5382/",
    "facebook": "facebook.com/profile.php?id=100076973940954",
    
    "planos": {
        "starter": {
            "mensalidade": "R$ 39,99",
            "desenvolvimento_inicial": "R$ 350,00",
            "descricao": "Site responsivo b√°sico, design moderno, hospedagem inclusa"
        },
        "professional": {
            "mensalidade": "R$ 79,99",
            "desenvolvimento_inicial": "R$ 530,00",
            "ia_opcional": "Opcional, precisa organizar pre√ßos com o Natan",
            "descricao": "Design personalizado avan√ßado, SEO, APIs, dom√≠nio personalizado"
        }
    },
    
    "diferenciais": [
        "Desenvolvimento r√°pido (estrutura base em 3-4 horas)",
        "Tecnologia de ponta com IA",
        "Qualidade garantida com revis√£o de c√≥digo",
        "100% responsivo (mobile, tablet, desktop)",
        "Design moderno com anima√ß√µes"
    ],
    
    "tipos_sites": [
        "Sites comerciais (empresas, consult√≥rios, lojas)",
        "Sites interativos (anima√ß√µes, 3D, quizzes)",
        "Sites personalizados (funcionalidades exclusivas)"
    ],
    
    "projetos": [
        {
            "nome": "Espa√ßo Familiares",
            "url": "espacofamiliares.com.br",
            "tipo": "Site para eventos especiais"
        },
        {
            "nome": "DeluxModPack GTAV",
            "url": "deluxgtav.netlify.app",
            "tipo": "Modpack para GTA V (C#)"
        },
        {
            "nome": "Quiz Venezuela",
            "url": "quizvenezuela.onrender.com",
            "tipo": "Quiz educacional interativo"
        },
        {
            "nome": "WebServi√ßo",
            "url": "webservico.netlify.app",
            "tipo": "P√°gina de servi√ßos"
        },
        {
            "nome": "MathWork",
            "url": "mathworkftv.netlify.app",
            "tipo": "Plataforma educacional de matem√°tica"
        },
        {
            "nome": "Alessandra Yoga",
            "url": "alessandrayoga.netlify.app",
            "tipo": "Cart√£o de visita digital"
        }
    ],
    
    "tempo_desenvolvimento": "Estrutura base: 3-4 horas | Projeto completo: 1-2 semanas",
    
    "nao_oferecemos": [
        "Sites prontos/templates b√°sicos",
        "Suporte gratuito ilimitado ap√≥s entrega",
        "Hospedagem gratuita permanente"
    ]
}

# Palavras/frases proibidas (alucina√ß√µes comuns)
PALAVRAS_PROIBIDAS = [
    # Pre√ßos falsos
    "gr√°tis", "gratuito", "sem custo", "de gra√ßa",
    "R$ 0", "0 reais", "free",
    
    # Promessas exageradas
    "garantimos primeiro lugar no Google",
    "100% de convers√£o",
    "sucesso garantido",
    "site pronto em 1 hora",
    
    # Informa√ß√µes falsas
    "atendimento 24/7",
    "suporte ilimitado gratuito",
    "empresa com 10 anos",
    "pr√™mio internacional",
    
    # Servi√ßos n√£o oferecidos
    "criamos aplicativos mobile nativos",
    "fazemos blockchain",
    "desenvolvemos jogos AAA",
    
    # Projetos inventados
    "[nome do cliente]",
    "[outro cliente]",
    "cliente X",
    "empresa Y"
]

# Padr√µes suspeitos que indicam alucina√ß√£o
PADROES_SUSPEITOS = [
    r'R\$\s*0[,.]?00',  # Pre√ßo zero
    r'gr√°t[ui]s',  # Gr√°tis
    r'garantimos?\s+\d+',  # Garantias com n√∫meros
    r'pr√™mio\s+\w+',  # Pr√™mios
    r'\d+\s+anos\s+de\s+experi√™ncia',  # Anos de experi√™ncia falsos
    r'fundado\s+em\s+\d{4}',  # Data de funda√ß√£o
    r'certifica√ß√£o\s+ISO',  # Certifica√ß√µes n√£o comprovadas
]

def validar_resposta_anti_alucinacao(resposta):
    """
    Valida resposta para evitar alucina√ß√µes.
    Retorna (bool_valida, lista_problemas)
    """
    problemas = []
    
    resposta_lower = resposta.lower()
    
    # 1. Verifica palavras proibidas
    for palavra in PALAVRAS_PROIBIDAS:
        if palavra.lower() in resposta_lower:
            problemas.append(f"Palavra proibida: '{palavra}'")
    
    # 2. Verifica padr√µes suspeitos
    for padrao in PADROES_SUSPEITOS:
        if re.search(padrao, resposta_lower):
            match = re.search(padrao, resposta_lower)
            problemas.append(f"Padr√£o suspeito: '{match.group()}'")
    
    # 3. Verifica WhatsApp correto
    if "whatsapp" in resposta_lower or "telefone" in resposta_lower:
        if "21 99282-6074" not in resposta and "99282-6074" not in resposta and "(21) 99282-6074" not in resposta:
            if any(num in resposta for num in ["(11)", "(21) 9", "0800"]):
                problemas.append("N√∫mero de WhatsApp incorreto")
    
    # 4. Verifica pre√ßos corretos
    if "starter" in resposta_lower:
        if "39,99" not in resposta and "39.99" not in resposta:
            problemas.append("Pre√ßo Starter incorreto")
    
    if "professional" in resposta_lower:
        if "79,99" not in resposta and "79.99" not in resposta:
            problemas.append("Pre√ßo Professional incorreto")
    
    # 5. Verifica nome correto
    if "criador" in resposta_lower or "dono" in resposta_lower or "desenvolvedor" in resposta_lower:
        if "natan" not in resposta_lower:
            problemas.append("Nome do criador n√£o mencionado")
    
    valida = len(problemas) == 0
    return valida, problemas

def limpar_alucinacoes(resposta):
    """
    Remove ou corrige alucina√ß√µes detectadas na resposta
    """
    resposta_limpa = resposta
    
    # Remove promessas exageradas
    resposta_limpa = re.sub(r'garantimos?\s+\d+%', '', resposta_limpa)
    
    # Remove men√ß√µes a anos de experi√™ncia n√£o confirmados
    resposta_limpa = re.sub(r'\d+\s+anos\s+de\s+experi√™ncia', 'experi√™ncia comprovada', resposta_limpa)
    
    # Remove certifica√ß√µes n√£o confirmadas
    resposta_limpa = re.sub(r'certifica√ß√£o\s+\w+', '', resposta_limpa)
    
    return resposta_limpa

# =============================================================================
# SISTEMA DE AN√ÅLISE DE INTEN√á√ÉO
# =============================================================================

def analisar_intencao(pergunta):
    """Analisa a inten√ß√£o das perguntas sobre servi√ßos"""
    try:
        p = pergunta.lower().strip()
        
        intencoes = {
            "precos": 0,
            "planos": 0,
            "contato": 0,
            "portfolio": 0,
            "criar_site": 0,
            "tipos_sites": 0,
            "tempo_desenvolvimento": 0,
            "como_funciona": 0,
            "tecnologias": 0,
            "responsivo": 0,
            "seo": 0,
            "diferenciais": 0,
            "projetos_especificos": 0,
            "sobre_natan": 0,
            "geral": 0
        }
        
        # PALAVRAS-CHAVE POR CATEGORIA
        
        palavras_conversa_casual = [
            "oi", "ol√°", "ola", "hey", "bom dia", "boa tarde", "boa noite",
            "tudo bem", "como vai", "e ai", "tchau", "bye", "obrigado", "valeu",
            "como foi", "seu dia", "conta", "piada", "engra√ßado",
            "quem √© voc√™", "o que voc√™ √©", "voc√™ √© uma ia", "natanai"
        ]
        
        palavras_sobre_natan = [
            "quem √© natan", "quem √© o natan", "quem criou", "criador",
            "desenvolvedor", "sobre natan"
        ]
        
        palavras_precos = [
            "pre√ßo", "valor", "quanto custa", "custo", "valores",
            "investimento", "or√ßamento"
        ]
        
        palavras_planos = [
            "plano", "pacote", "planos", "starter", "professional",
            "op√ß√µes", "tipos de plano"
        ]
        
        palavras_contato = [
            "contato", "whatsapp", "telefone", "falar", "ligar",
            "instagram", "email", "entrar em contato"
        ]
        
        palavras_portfolio = [
            "portfolio", "projetos", "trabalhos", "cases",
            "exemplos", "j√° fizeram", "feitos"
        ]
        
        palavras_criar_site = [
            "quero criar", "fazer um site", "criar meu site",
            "preciso de um site", "quero um site", "criar site"
        ]
        
        palavras_tipos_sites = [
            "que tipo", "tipos de site", "que sites", "categorias",
            "site comercial", "site interativo"
        ]
        
        palavras_tempo = [
            "quanto tempo", "demora", "prazo", "entrega",
            "r√°pido", "velocidade"
        ]
        
        palavras_como_funciona = [
            "como funciona", "como fa√ßo", "processo", "passo a passo",
            "como contratar", "como come√ßar"
        ]
        
        palavras_tecnologias = [
            "tecnologia", "linguagem", "framework", "usa ia",
            "intelig√™ncia artificial", "ferramentas"
        ]
        
        palavras_responsivo = [
            "responsivo", "mobile", "celular", "tablet",
            "funciona no celular", "adapta"
        ]
        
        palavras_seo = [
            "seo", "google", "busca", "aparecer no google",
            "otimiza√ß√£o", "ranqueamento"
        ]
        
        palavras_diferenciais = [
            "diferencial", "por que escolher", "vantagem",
            "melhor que", "destaque"
        ]
        
        palavras_projetos = [
            "espa√ßo familiares", "mathwork", "quiz venezuela",
            "alessandra yoga", "delux", "webservico"
        ]
        
        # CONTAGEM COM PESOS
        for palavra in palavras_conversa_casual:
            if palavra in p:
                intencoes["geral"] += 2  # Peso baixo para n√£o sobrepor servi√ßos
        
        for palavra in palavras_sobre_natan:
            if palavra in p:
                intencoes["sobre_natan"] += 6
        
        for palavra in palavras_precos:
            if palavra in p:
                intencoes["precos"] += 7
        
        for palavra in palavras_planos:
            if palavra in p:
                intencoes["planos"] += 7
        
        for palavra in palavras_contato:
            if palavra in p:
                intencoes["contato"] += 6
        
        for palavra in palavras_portfolio:
            if palavra in p:
                intencoes["portfolio"] += 6
        
        for palavra in palavras_criar_site:
            if palavra in p:
                intencoes["criar_site"] += 8
        
        for palavra in palavras_tipos_sites:
            if palavra in p:
                intencoes["tipos_sites"] += 5
        
        for palavra in palavras_tempo:
            if palavra in p:
                intencoes["tempo_desenvolvimento"] += 6
        
        for palavra in palavras_como_funciona:
            if palavra in p:
                intencoes["como_funciona"] += 6
        
        for palavra in palavras_tecnologias:
            if palavra in p:
                intencoes["tecnologias"] += 5
        
        for palavra in palavras_responsivo:
            if palavra in p:
                intencoes["responsivo"] += 5
        
        for palavra in palavras_seo:
            if palavra in p:
                intencoes["seo"] += 5
        
        for palavra in palavras_diferenciais:
            if palavra in p:
                intencoes["diferenciais"] += 5
        
        for palavra in palavras_projetos:
            if palavra in p:
                intencoes["projetos_especificos"] += 6
        
        intencao_principal = max(intencoes, key=intencoes.get)
        score_principal = intencoes[intencao_principal]
        
        return intencao_principal if score_principal > 1 else "geral"
    
    except Exception as e:
        print(f"‚ùå Erro an√°lise inten√ß√£o: {e}")
        return "geral"

# =============================================================================
# BUSCA NA BASE ESPECIALIZADA
# =============================================================================

def buscar_resposta_especializada(pergunta):
    """Apenas analisa a inten√ß√£o - n√£o retorna respostas prontas"""
    try:
        intencao = analisar_intencao(pergunta)
        # Agora s√≥ retorna a inten√ß√£o, sem respostas prontas
        return None, intencao
        
    except Exception as e:
        print(f"‚ùå Erro an√°lise inten√ß√£o: {e}")
        return None, "geral"
    
    # =============================================================================
# PROCESSAMENTO H√çBRIDO COM OPENAI + ANTI-ALUCINA√á√ÉO
# =============================================================================

def verificar_openai():
    """Verifica se OpenAI est√° dispon√≠vel"""
    try:
        if not OPENAI_API_KEY or len(OPENAI_API_KEY) < 20:
            return False
        
        if client is None:
            return False
        
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[{"role": "user", "content": "teste"}],
            max_tokens=5
        )
        return True
    except Exception as e:
        print(f"‚ùå OpenAI indispon√≠vel: {e}")
        return False

def processar_openai_hibrido(pergunta, intencao):
    """
    Processa com OpenAI em modo H√çBRIDO com anti-alucina√ß√£o
    """
    if client is None:
        return None
    
    if not verificar_openai():
        return None
    
    try:
        # Monta prompt RESTRITIVO com informa√ß√µes oficiais
        prompt_sistema = f"""Voc√™ √© o NatanAI, assistente virtual inteligente, masculino, amig√°vel e emp√°tico da NatanDEV!

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
INFORMA√á√ïES OFICIAIS DO NATANDEV (USE QUANDO RELEVANTE)
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üë®‚Äçüíª **SOBRE O CRIADOR (NATAN - O DESENVOLVEDOR):**
- Nome: Natan Borges Alves Nascimento
- Profiss√£o: Web Developer Full-Stack
- Localiza√ß√£o: Rio de Janeiro, Brasil
- Atendimento: Todo o Brasil (remoto)
- **IMPORTANTE: Natan √© quem DESENVOLVE os sites. Voc√™ (NatanAI) √© apenas a assistente virtual dele.**

ü§ñ **SOBRE VOC√ä (NATANAI):**
- Voc√™ √© a NatanAI, criada POR Natan para ser a assistente virtual dele
- Voc√™ N√ÉO desenvolve sites - voc√™ apenas auxilia clientes e responde perguntas
- Sempre fale "o Natan desenvolve", "o Natan cria", "ele pode fazer"
- NUNCA diga "eu desenvolvo", "eu crio" ou "n√≥s fazemos" - voc√™ √© apenas a assistente!

üìû **CONTATOS OFICIAIS:**
- WhatsApp: (21) 99282-6074 ‚Üê PRINCIPAL
- Instagram: @nborges.ofc
- Email: borgesnatan09@gmail.com
- Site: natansites.com.br
- Portf√≥lio: natandev02.netlify.app
- GitHub: github.com/natsongamesoficial551
- LinkedIn: linkedin.com/in/natan-borges-b3a3b5382/
- Facebook: facebook.com/profile.php?id=100076973940954

üí∞ **PLANOS E PRE√áOS:**

üå± PLANO STARTER - R$ 39,99/m√™s
   + R$ 350,00 desenvolvimento inicial (pagamento √öNICO)
   
   Inclui:
   ‚úÖ Site responsivo b√°sico
   ‚úÖ Design moderno e limpo
   ‚úÖ Otimiza√ß√£o para mobile
   ‚úÖ Hospedagem inclusa
   ‚úÖ Suporte por WhatsApp/Email
   
   Ideal para: pequenos neg√≥cios, profissionais aut√¥nomos, cart√µes de visita digitais

üöÄ PLANO PROFESSIONAL - R$ 79,99/m√™s
   + R$ 530,00 desenvolvimento inicial (pagamento √öNICO)
   
   Inclui:
   ‚úÖ Design personalizado avan√ßado
   ‚úÖ Anima√ß√µes e interatividade
   ‚úÖ SEO otimizado (apare√ßa no Google!)
   ‚úÖ Integra√ß√£o de APIs
   ‚úÖ Dom√≠nio personalizado
   ‚úÖ Formul√°rios de contato
   ‚úÖ Suporte priorit√°rio
   
   OPCIONAL: IA Integrada, opcional, precisa organizar pre√ßos com o Natan

üí° IMPORTANTE: Valores de desenvolvimento inicial s√£o pagos UMA VEZ! A mensalidade √© s√≥ para hospedagem e manuten√ß√£o.

üíº **PORTF√ìLIO (6 PROJETOS DESENVOLVIDOS PELO NATAN):**

1. üè† Espa√ßo Familiares (espacofamiliares.com.br)
   ‚Üí Site para eventos especiais (casamentos, festas, dayuse)

2. üìö MathWork (mathworkftv.netlify.app)
   ‚Üí Plataforma educacional de matem√°tica com 10 alunos

3. üßò Alessandra Yoga (alessandrayoga.netlify.app)
   ‚Üí Cart√£o de visita digital profissional

4. üéÆ DeluxModPack GTAV (deluxgtav.netlify.app)
   ‚Üí Modpack para GTA V desenvolvido em C# (BETA)

5. üìù Quiz Venezuela (quizvenezuela.onrender.com)
   ‚Üí Quiz educacional interativo

6. üåê WebServi√ßo (webservico.netlify.app)
   ‚Üí P√°gina de apresenta√ß√£o de servi√ßos

Portf√≥lio completo: natandev02.netlify.app

üé® **TIPOS DE SITES QUE O NATAN DESENVOLVE:**
- Sites Comerciais (empresas, consult√≥rios, escrit√≥rios, lojas)
- Sites Interativos (anima√ß√µes, 3D, quizzes, calculadoras, jogos educativos)
- Sites Personalizados (funcionalidades exclusivas sob medida)

‚è±Ô∏è **TEMPO DE DESENVOLVIMENTO DO NATAN:**
- Estrutura base: 3-4 horas (super r√°pido!)
- Projeto completo simples: 1 semana
- Projeto completo complexo: 2 semanas
- Projetos especiais: sob consulta

üìã **PROCESSO (4 PASSOS):**
1. Contato inicial via WhatsApp: (21) 99282-6074
2. Escolha do plano e planejamento com o Natan
3. Desenvolvimento pelo Natan (estrutura base em 3-4h!)
4. Revis√£o, ajustes e entrega

üíª **TECNOLOGIAS QUE O NATAN USA:**
- Front-end: HTML5, CSS3, JavaScript, frameworks modernos
- IA: Uso estrat√©gico para cria√ß√£o visual e otimiza√ß√£o
- Back-end: APIs modernas, integra√ß√£o com sistemas
- SEO: Otimiza√ß√£o para Google (no plano Professional)
- 100% Responsivo: Mobile, tablet e desktop

‚≠ê **DIFERENCIAIS DO NATAN:**
- Desenvolvimento R√ÅPIDO (estrutura base em 3-4 horas!)
- Tecnologia de ponta com IA
- Qualidade garantida com revis√£o de c√≥digo
- 100% responsivo (mobile-first)
- Design moderno com anima√ß√µes
- Pre√ßo justo e acess√≠vel
- Atendimento personalizado direto com o desenvolvedor

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
REGRAS DE COMPORTAMENTO
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

üéØ **CONVERSAS CASUAIS:**
- Se a pessoa falar sobre o dia, fazer piada, bater papo ‚Üí Responda NATURALMENTE como um amigo!
- Seja emp√°tico, descontra√≠do, humano e acolhedor
- Use tom leve e amig√°vel
- N√ÉO force informa√ß√µes sobre servi√ßos em conversas casuais

üíº **PERGUNTAS SOBRE SERVI√áOS:**
- Quando perguntarem sobre pre√ßos, sites, portf√≥lio, contato ‚Üí Use as informa√ß√µes oficiais acima
- **SEMPRE DEIXE CLARO QUE O NATAN √â QUEM DESENVOLVE, N√ÉO VOC√ä!**
- Use frases como: "O Natan desenvolve...", "Ele pode criar...", "O trabalho dele inclui..."
- Seja claro, direto e entusiasmado
- Destaque os diferenciais quando relevante
- Sempre mencione o WhatsApp: (21) 99282-6074

üîó **TRANSI√á√ÉO NATURAL:**
- Ap√≥s responder algo casual, voc√™ PODE mencionar brevemente (1 linha) que tamb√©m ajuda com sites
- Exemplo: "Ali√°s, se precisar de um site profissional, o Natan pode ajudar! Sou a assistente dele üòä"
- Mas APENAS se fizer sentido no contexto

‚ùå **PROIBIDO:**
- NUNCA diga "eu desenvolvo", "eu crio", "eu fa√ßo" quando falar de desenvolvimento
- NUNCA invente pre√ßos diferentes dos oficiais
- NUNCA invente projetos, clientes ou cases n√£o listados
- NUNCA diga que o servi√ßo √© gratuito
- NUNCA prometa "primeiro lugar no Google garantido"
- NUNCA invente anos de experi√™ncia ou pr√™mios
- NUNCA mencione servi√ßos n√£o oferecidos (apps mobile nativos, blockchain, etc)

‚úÖ **SE N√ÉO SOUBER:**
- Para d√∫vidas sobre servi√ßos que n√£o est√£o nas informa√ß√µes acima
- Direcione para contato direto: "Melhor chamar o Natan no WhatsApp: (21) 99282-6074 para tirar essa d√∫vida!"

üé® **PERSONALIDADE:**
- Amig√°vel, emp√°tica e natural
- Entusiasta quando falar dos servi√ßos DO NATAN
- Use emojis com modera√ß√£o (2-4 por resposta)
- Seja conciso para conversas casuais (m√°ximo 100 palavras)
- Para perguntas sobre servi√ßos, pode ser mais detalhado (at√© 250 palavras)
- Use "Vibra√ß√µes Positivas!" ocasionalmente (30% das respostas, quando fizer sentido)

üìä **FORMATA√á√ÉO:**
- Conversas casuais: Texto corrido, natural, sem listas
- Perguntas sobre servi√ßos: Pode usar emojis, listas e formata√ß√£o para clareza
- Sempre organize bem as informa√ß√µes
- **SEMPRE deixe claro que o Natan √© o desenvolvedor, n√£o voc√™!**

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

**CONTEXTO DA CONVERSA ATUAL:** {intencao}

Responda de forma adequada ao contexto: casual e emp√°tica para conversa, ou detalhada e entusiasmada para servi√ßos!

**LEMBRE-SE: Voc√™ √© a ASSISTENTE do Natan. ELE desenvolve os sites, N√ÉO VOC√ä!**
"""

        prompt_usuario = f"Responda de forma direta e empolgante: {pergunta}"

        # Chamada OpenAI
        response = client.chat.completions.create(
            model=OPENAI_MODEL,
            messages=[
                {"role": "system", "content": prompt_sistema},
                {"role": "user", "content": prompt_usuario}
            ],
            max_tokens=300,
            temperature=0.7,
            top_p=0.9,
            presence_penalty=0.1,
            frequency_penalty=0.1
        )
        
        resposta_openai = response.choices[0].message.content.strip()
        
        # VALIDA√á√ÉO ANTI-ALUCINA√á√ÉO
        valida, problemas = validar_resposta_anti_alucinacao(resposta_openai)
        
        if not valida:
            print(f"‚ö†Ô∏è Alucina√ß√£o detectada! Problemas: {problemas}")
            resposta_openai = limpar_alucinacoes(resposta_openai)
            
            valida2, problemas2 = validar_resposta_anti_alucinacao(resposta_openai)
            if len(problemas2) > 2:
                print(f"‚ùå Resposta OpenAI descartada por m√∫ltiplas alucina√ß√µes")
                return None
        
        # Garante que tem "Vibra√ß√µes Positivas!" em algumas respostas
        if random.random() < 0.3 and "vibra√ß√µes positivas" not in resposta_openai.lower():
            resposta_openai += "\n\nVibra√ß√µes Positivas!"
        
        print(f"‚úÖ Resposta OpenAI h√≠brida validada")
        return resposta_openai
        
    except Exception as e:
        print(f"‚ùå Erro OpenAI h√≠brido: {e}")
        return None

# =============================================================================
# GERADOR PRINCIPAL H√çBRIDO
# =============================================================================

def gerar_resposta_hibrida_otimizada(pergunta):
    """
    Sistema 100% OpenAI com valida√ß√£o anti-alucina√ß√£o
    """
    try:
        # Cache
        pergunta_hash = hashlib.md5(pergunta.lower().strip().encode()).hexdigest()
        if pergunta_hash in CACHE_RESPOSTAS:
            return CACHE_RESPOSTAS[pergunta_hash], "cache"
        
        # Analisa inten√ß√£o
        _, intencao = buscar_resposta_especializada(pergunta)
        
        # USA OPENAI PARA TUDO (com as informa√ß√µes oficiais no prompt)
        resposta_openai = processar_openai_hibrido(pergunta, intencao)
        if resposta_openai:
            CACHE_RESPOSTAS[pergunta_hash] = resposta_openai
            return resposta_openai, f"openai_dinamico_{intencao}"
        
        # FALLBACK apenas se OpenAI falhar
        fallback = f"Desculpa, estou com dificuldades t√©cnicas agora. üòÖ\n\nChama no WhatsApp para te ajudar: (21) 99282-6074\n\nVibra√ß√µes Positivas!"
        
        return fallback, "fallback_emergency"
        
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return "Para informa√ß√µes, fale com Natan: (21) 99282-6074\n\nVibra√ß√µes Positivas!", "erro_emergency"
    
    # =============================================================================
# ROTAS DA API
# =============================================================================

@app.route('/health', methods=['GET'])
@app.route('/api/health', methods=['GET'])
def health():
    try:
        return jsonify({
            "status": "online",
            "sistema": "NatanAI v4.0 H√çBRIDA NATURAL",
            "modo": "OpenAI GPT-4o-mini + Base Especializada + Anti-Alucina√ß√£o + Conversa√ß√£o Natural",
            "modelo": OPENAI_MODEL,
            "openai_ativo": verificar_openai(),
            "cache_size": len(CACHE_RESPOSTAS),
            "info_servicos": {
                "criador": INFORMACOES_OFICIAIS["criador"],
                "whatsapp": INFORMACOES_OFICIAIS["whatsapp"],
                "site": INFORMACOES_OFICIAIS["site"],
                "portfolio": INFORMACOES_OFICIAIS["portfolio"],
                "projetos_total": len(INFORMACOES_OFICIAIS["projetos"])
            },
            "sistema_anti_alucinacao": {
                "validacao_ativa": True,
                "palavras_proibidas": len(PALAVRAS_PROIBIDAS),
                "padroes_suspeitos": len(PADROES_SUSPEITOS),
                "limpeza_automatica": True
            },
            "funcionalidades": [
                "100% OpenAI - respostas din√¢micas e inteligentes",
                "Informa√ß√µes oficiais embutidas no prompt",
                "Detec√ß√£o de informa√ß√µes inventadas",
                "Limpeza autom√°tica de alucina√ß√µes",
                "Fallback de emerg√™ncia",
                "Cache inteligente",
                "Conversa√ß√£o natural e emp√°tica"
            ]
        })
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/chat', methods=['POST'])
@app.route('/api/chat', methods=['POST'])
def chat_hibrido():
    global HISTORICO_CONVERSAS
    
    try:
        data = request.get_json()
        
        if not data or 'message' not in data and 'pergunta' not in data:
            return jsonify({"error": "Mensagem n√£o fornecida"}), 400
        
        pergunta = data.get('message') or data.get('pergunta', '')
        pergunta = pergunta.strip()
        
        if not pergunta:
            return jsonify({"error": "Mensagem vazia"}), 400
        
        print(f"\nüí¨ [{datetime.now().strftime('%H:%M:%S')}] Pergunta: {pergunta}")
        
        # Gera resposta H√çBRIDA
        resposta, fonte = gerar_resposta_hibrida_otimizada(pergunta)
        
        # Valida√ß√£o final anti-alucina√ß√£o
        valida, problemas = validar_resposta_anti_alucinacao(resposta)
        if not valida:
            print(f"‚ö†Ô∏è Valida√ß√£o final: {len(problemas)} problemas detectados")
        
        # Hist√≥rico
        with historico_lock:
            HISTORICO_CONVERSAS.append({
                "timestamp": datetime.now().isoformat(),
                "pergunta": pergunta,
                "fonte": fonte,
                "validacao_ok": valida,
                "problemas": len(problemas) if not valida else 0
            })
            
            if len(HISTORICO_CONVERSAS) > 1000:
                HISTORICO_CONVERSAS = HISTORICO_CONVERSAS[-500:]
        
        return jsonify({
            "response": resposta,
            "resposta": resposta,  # Compatibilidade
            "metadata": {
                "fonte": fonte,
                "sistema": "NatanAI v4.0 H√≠brida Natural",
                "modelo": OPENAI_MODEL if "openai" in fonte else "Base Especializada",
                "validacao_anti_alucinacao": valida,
                "modo_hibrido": True,
                "confiabilidade": "alta" if valida else "media"
            }
        })
        
    except Exception as e:
        print(f"‚ùå Erro no chat: {e}")
        return jsonify({
            "response": "Para informa√ß√µes, fale com Natan: (21) 99282-6074\n\nVibra√ß√µes Positivas!",
            "resposta": "Para informa√ß√µes, fale com Natan: (21) 99282-6074\n\nVibra√ß√µes Positivas!",
            "metadata": {
                "fonte": "erro_emergency",
                "error": str(e)
            }
        }), 500

@app.route('/api/info', methods=['GET'])
def info():
    """Retorna informa√ß√µes sobre a NatanAI"""
    return jsonify({
        "nome": "NatanAI",
        "versao": "4.0 - H√≠brida Natural (OpenAI + Base Especializada + Conversa√ß√£o)",
        "criador": INFORMACOES_OFICIAIS["criador"],
        "profissao": INFORMACOES_OFICIAIS["profissao"],
        "modelo": {
            "nome": OPENAI_MODEL,
            "tipo": "OpenAI GPT-4o-mini",
            "status": "üü¢ Online" if verificar_openai() else "üî¥ Offline",
            "modo": "H√≠brido com anti-alucina√ß√£o e conversa√ß√£o natural"
        },
        "contato": {
            "whatsapp": INFORMACOES_OFICIAIS["whatsapp"],
            "instagram": INFORMACOES_OFICIAIS["instagram"],
            "email": INFORMACOES_OFICIAIS["email"],
            "site": INFORMACOES_OFICIAIS["site"],
            "portfolio": INFORMACOES_OFICIAIS["portfolio"]
        },
        "planos": INFORMACOES_OFICIAIS["planos"],
        "projetos": INFORMACOES_OFICIAIS["projetos"],
        "localizacao": INFORMACOES_OFICIAIS["localizacao"],
        "atendimento": INFORMACOES_OFICIAIS["atendimento"]
    })

@app.route('/estatisticas', methods=['GET'])
@app.route('/api/estatisticas', methods=['GET'])
def estatisticas():
    try:
        if not HISTORICO_CONVERSAS:
            return jsonify({"message": "Nenhuma conversa registrada"})
        
        fontes_count = {}
        validacoes_ok = 0
        total_problemas = 0
        
        with historico_lock:
            for conv in HISTORICO_CONVERSAS:
                fonte = conv.get("fonte", "unknown")
                fontes_count[fonte] = fontes_count.get(fonte, 0) + 1
                
                if conv.get("validacao_ok", True):
                    validacoes_ok += 1
                total_problemas += conv.get("problemas", 0)
        
        return jsonify({
            "total_conversas": len(HISTORICO_CONVERSAS),
            "distribuicao_fontes": fontes_count,
            "validacao_anti_alucinacao": {
                "respostas_validadas": validacoes_ok,
                "taxa_sucesso": round((validacoes_ok / len(HISTORICO_CONVERSAS)) * 100, 2),
                "total_problemas_detectados": total_problemas,
                "media_problemas": round(total_problemas / len(HISTORICO_CONVERSAS), 2)
            },
            "sistema": "NatanAI v4.0 H√≠brida Natural",
            "modo": "OpenAI + Base Especializada + Anti-Alucina√ß√£o + Conversa√ß√£o"
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/exemplos', methods=['GET'])
def exemplos():
    """Retorna exemplos de perguntas"""
    return jsonify({
        "exemplos_perguntas": [
            "Quanto custa um site?",
            "Quem √© o Natan?",
            "Quero criar um site para minha empresa",
            "Quanto tempo demora para fazer um site?",
            "O site fica responsivo?",
            "Voc√™s usam IA?",
            "Quais projetos j√° fizeram?",
            "Como entro em contato?",
            "Qual o WhatsApp?",
            "Quero ver o portf√≥lio",
            "Me fale sobre os planos",
            "Qual a diferen√ßa entre Starter e Professional?",
            "Como funciona o processo?",
            "Faz site com SEO?",
            "Atende em qual cidade?",
            "Oi, tudo bem?",
            "Como foi seu dia?",
            "Conta uma piada"
        ],
        "dica": "A NatanAI conversa naturalmente E conhece tudo sobre os servi√ßos da NatanDEV! Pergunte qualquer coisa! üöÄ",
        "modelo": f"Usando OpenAI {OPENAI_MODEL} com sistema anti-alucina√ß√£o e conversa√ß√£o natural"
    })

@app.route('/ping', methods=['GET'])
def ping():
    return jsonify({
        "status": "pong",
        "timestamp": datetime.now().isoformat(),
        "sistema": "NatanAI v4.0 H√≠brida Natural"
    })

@app.route('/', methods=['GET'])
def home():
    html = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>NatanAI v4.0 - H√≠brida Natural</title>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: 'Segoe UI', Arial, sans-serif; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            .container { 
                max-width: 850px; 
                margin: 0 auto; 
                background: white; 
                padding: 30px; 
                border-radius: 20px; 
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            }
            .header { 
                text-align: center; 
                margin-bottom: 30px;
                padding-bottom: 20px;
                border-bottom: 3px solid #667eea;
            }
            .header h1 { 
                color: #667eea; 
                margin-bottom: 10px;
                font-size: 2em;
            }
            .badge {
                display: inline-block;
                padding: 8px 16px;
                margin: 5px;
                border-radius: 20px;
                font-size: 0.85em;
                font-weight: bold;
            }
            .badge-hybrid { background: linear-gradient(135deg, #667eea, #764ba2); color: white; }
            .badge-ai { background: #4CAF50; color: white; }
            .badge-safe { background: #2196F3; color: white; }
            .badge-natural { background: #FF6B6B; color: white; }
            
            .info-box {
                background: linear-gradient(135deg, #e3f2fd, #f3e5f5);
                padding: 20px;
                border-radius: 15px;
                margin: 20px 0;
                border-left: 5px solid #667eea;
            }
            .info-box h3 { color: #667eea; margin-bottom: 10px; }
            .info-box ul { list-style: none; padding-left: 0; }
            .info-box li { 
                padding: 8px 0; 
                padding-left: 25px;
                position: relative;
            }
            .info-box li:before {
                content: "‚úì";
                position: absolute;
                left: 0;
                color: #4CAF50;
                font-weight: bold;
            }
            
            .chat-box { 
                border: 2px solid #e0e0e0;
                height: 450px; 
                overflow-y: auto; 
                padding: 20px; 
                margin: 20px 0; 
                background: #fafafa;
                border-radius: 15px;
            }
            .message { 
                margin: 15px 0; 
                padding: 15px; 
                border-radius: 15px;
                animation: fadeIn 0.3s;
            }
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(10px); }
                to { opacity: 1; transform: translateY(0); }
            }
            .user { 
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                margin-left: 20%;
                border-bottom-right-radius: 5px;
            }
            .bot { 
                background: #e8f5e9;
                margin-right: 20%;
                border-bottom-left-radius: 5px;
                border-left: 4px solid #4CAF50;
            }
            .bot-hybrid {
                background: linear-gradient(135deg, #e3f2fd, #f3e5f5);
                border-left: 4px solid #667eea;
            }
            .metadata {
                font-size: 0.75em;
                color: #666;
                margin-top: 8px;
                padding-top: 8px;
                border-top: 1px solid rgba(0,0,0,0.1);
            }
            .metadata-badge {
                display: inline-block;
                padding: 3px 8px;
                margin: 2px;
                background: rgba(0,0,0,0.1);
                border-radius: 10px;
                font-size: 0.9em;
            }
            
            .input-area { 
                display: flex; 
                gap: 10px;
                margin-top: 20px;
            }
            input { 
                flex: 1; 
                padding: 15px; 
                border: 2px solid #e0e0e0;
                border-radius: 25px;
                font-size: 1em;
                transition: all 0.3s;
            }
            input:focus {
                outline: none;
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            button { 
                padding: 15px 30px;
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white; 
                border: none;
                border-radius: 25px;
                cursor: pointer;
                font-weight: bold;
                transition: all 0.3s;
            }
            button:hover { 
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }
            button:active {
                transform: translateY(0);
            }
            
            .examples {
                display: flex;
                flex-wrap: wrap;
                gap: 10px;
                margin: 20px 0;
            }
            .example-btn {
                padding: 8px 16px;
                background: white;
                border: 2px solid #667eea;
                color: #667eea;
                border-radius: 20px;
                cursor: pointer;
                font-size: 0.9em;
                transition: all 0.3s;
            }
            .example-btn:hover {
                background: #667eea;
                color: white;
            }
            
            .footer {
                text-align: center;
                margin-top: 30px;
                padding-top: 20px;
                border-top: 2px solid #e0e0e0;
                color: #666;
                font-size: 0.9em;
            }
            
            @media (max-width: 600px) {
                .container { padding: 15px; }
                .header h1 { font-size: 1.5em; }
                .message { margin: 10px 0; padding: 10px; }
                .user, .bot { margin-left: 0; margin-right: 0; }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>ü§ñ NatanAI v4.0 - H√çBRIDA NATURAL</h1>
                <p style="color: #666; margin: 10px 0;">Assistente Inteligente da NatanDEV</p>
                <div>
                    <span class="badge badge-hybrid">MODO H√çBRIDO</span>
                    <span class="badge badge-ai">OpenAI GPT-4o-mini</span>
                    <span class="badge badge-safe">Anti-Alucina√ß√£o</span>
                    <span class="badge badge-natural">Conversa√ß√£o Natural</span>
                </div>
            </div>
            
            <div class="info-box">
                <h3>üéØ Sistema H√≠brido Natural</h3>
                <ul>
                    <li><strong>Conversa√ß√£o Natural:</strong> Responde perguntas casuais de forma emp√°tica e humana</li>
                    <li><strong>Base Especializada:</strong> Respostas 100% confi√°veis sobre servi√ßos</li>
                    <li><strong>OpenAI GPT-4o-mini:</strong> Intelig√™ncia avan√ßada para qualquer pergunta</li>
                    <li><strong>Valida√ß√£o Anti-Alucina√ß√£o:</strong> Verifica e corrige informa√ß√µes inventadas</li>
                </ul>
            </div>
            
            <div class="info-box">
                <h3>üìç Sobre a NatanDEV</h3>
                <ul>
                    <li><strong>Criador:</strong> Natan Borges Alves Nascimento - Web Developer Full-Stack</li>
                    <li><strong>WhatsApp:</strong> (21) 99282-6074</li>
                    <li><strong>Planos:</strong> Starter (R$ 39,99/m√™s) | Professional (R$ 79,99/m√™s)</li>
                    <li><strong>Projetos:</strong> 6+ sites entregues (Espa√ßo Familiares, MathWork, etc.)</li>
                    <li><strong>Portf√≥lio:</strong> natandev02.netlify.app</li>
                    <li><strong>Diferencial:</strong> Estrutura base em 3-4 horas!</li>
                </ul>
            </div>
            
            <div id="chat-box" class="chat-box">
                <div class="message bot bot-hybrid">
                    <strong>ü§ñ NatanAI v4.0 Natural:</strong><br><br>
                    Oi! Sou a NatanAI! üòä<br><br>
                    
                    <strong>Posso conversar sobre qualquer coisa:</strong><br>
                    üí¨ Bater papo casual<br>
                    üí∞ Informa√ß√µes sobre sites e servi√ßos<br>
                    üìû Contatos e portf√≥lio<br>
                    üöÄ Processos de desenvolvimento<br><br>
                    
                    Seja voc√™ mesmo! Pergunta o que quiser! üíú<br><br>
                    
                    <strong>Vibra√ß√µes Positivas!</strong>
                </div>
            </div>
            
            <div class="examples">
                <button class="example-btn" onclick="testar('Oi, tudo bem?')">üëã Sauda√ß√£o</button>
                <button class="example-btn" onclick="testar('Quanto custa um site?')">üí∞ Pre√ßos</button>
                <button class="example-btn" onclick="testar('Quero criar um site')">üöÄ Criar Site</button>
                <button class="example-btn" onclick="testar('Como foi seu dia?')">üí¨ Casual</button>
                <button class="example-btn" onclick="testar('Qual o portf√≥lio?')">üíº Portf√≥lio</button>
                <button class="example-btn" onclick="testar('Conta uma piada')">üòÑ Piada</button>
            </div>
            
            <div class="input-area">
                <input type="text" id="msg" placeholder="Digite sua pergunta ou s√≥ bata um papo..." onkeypress="if(event.key==='Enter') enviar()">
                <button onclick="enviar()">Enviar</button>
            </div>
            
            <div class="footer">
                <p><strong>NatanAI v4.0 - Sistema H√≠brido Natural</strong></p>
                <p>OpenAI GPT-4o-mini + Base Especializada + Anti-Alucina√ß√£o + Conversa√ß√£o Natural</p>
                <p style="margin-top: 10px;">üìû WhatsApp: (21) 99282-6074 | üåê natansites.com.br</p>
                <p style="margin-top: 5px;">üì∏ Instagram: @nborges.ofc | üíº natandev02.netlify.app</p>
            </div>
        </div>

        <script>
        function testar(msg) {
            document.getElementById('msg').value = msg;
            enviar();
        }
        
        async function enviar() {
            const input = document.getElementById('msg');
            const chatBox = document.getElementById('chat-box');
            const msg = input.value.trim();
            
            if (!msg) return;
            
            // Mensagem do usu√°rio
            chatBox.innerHTML += `
                <div class="message user">
                    <strong>Voc√™:</strong><br>${msg}
                </div>
            `;
            input.value = '';
            chatBox.scrollTop = chatBox.scrollHeight;
            
            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: msg })
                });
                
                const data = await response.json();
                const metadata = data.metadata || {};
                
                // Determina classe CSS baseada na fonte
                let className = 'message bot';
                if (metadata.fonte && metadata.fonte.includes('openai')) {
                    className += ' bot-hybrid';
                }
                
                // Monta badges de metadata
                let metadataBadges = '';
                if (metadata.fonte) {
                    metadataBadges += `<span class="metadata-badge">üìä ${metadata.fonte}</span>`;
                }
                if (metadata.validacao_anti_alucinacao !== undefined) {
                    const validIcon = metadata.validacao_anti_alucinacao ? '‚úÖ' : '‚ö†Ô∏è';
                    metadataBadges += `<span class="metadata-badge">${validIcon} Valida√ß√£o</span>`;
                }
                if (metadata.confiabilidade) {
                    metadataBadges += `<span class="metadata-badge">üéØ ${metadata.confiabilidade}</span>`;
                }
                
                // Resposta da IA
                const respText = (data.response || data.resposta).replace(/\n/g, '<br>');
                chatBox.innerHTML += `
                    <div class="${className}">
                        <strong>ü§ñ NatanAI:</strong><br>${respText}
                        ${metadataBadges ? `<div class="metadata">${metadataBadges}</div>` : ''}
                    </div>
                `;
                
            } catch (error) {
                chatBox.innerHTML += `
                    <div class="message bot">
                        <strong>ü§ñ NatanAI:</strong><br>
                        Erro de conex√£o. Fale com Natan: (21) 99282-6074<br><br>
                        Vibra√ß√µes Positivas!
                    </div>
                `;
            }
            
            chatBox.scrollTop = chatBox.scrollHeight;
        }
        </script>
    </body>
    </html>
    """
    return render_template_string(html)

# =============================================================================
# INICIALIZA√á√ÉO
# =============================================================================

if __name__ == '__main__':
    print("\n" + "="*80)
    print("ü§ñ NATANAI v4.0 - SISTEMA H√çBRIDO NATURAL")
    print("="*80)
    print("üë®‚Äçüíª Criador: Natan Borges Alves Nascimento")
    print("üöÄ Web Developer Full-Stack")
    print("üìû WhatsApp: (21) 99282-6074")
    print("üåê Site: natansites.com.br")
    print("üíº Portf√≥lio: natandev02.netlify.app")
    print("="*80)
    
    # Sistema 100% din√¢mico com OpenAI
    print("‚úÖ Sistema configurado: 100% OpenAI com informa√ß√µes oficiais no prompt")
    
    # Verifica OpenAI
    openai_status = verificar_openai()
    
    print(f"\nüîß CONFIGURA√á√ÉO:")
    print(f"   ‚Ä¢ Modelo: {OPENAI_MODEL}")
    print(f"   ‚Ä¢ OpenAI: {'‚úÖ CONECTADO' if openai_status else '‚ö†Ô∏è OFFLINE'}")
    print(f"   ‚Ä¢ Sistema Anti-Alucina√ß√£o: ‚úÖ ATIVO")
    print(f"   ‚Ä¢ Palavras Proibidas: {len(PALAVRAS_PROIBIDAS)}")
    print(f"   ‚Ä¢ Padr√µes Suspeitos: {len(PADROES_SUSPEITOS)}")
    
    print(f"\nüéØ MODO 100% DIN√ÇMICO:")
    print(f"   1Ô∏è‚É£ OpenAI cria TODAS as respostas dinamicamente")
    print(f"   2Ô∏è‚É£ Informa√ß√µes oficiais embutidas no prompt do sistema")
    print(f"   3Ô∏è‚É£ Valida√ß√£o anti-alucina√ß√£o (sempre ativa)")
    print(f"   4Ô∏è‚É£ Sem respostas prontas - 100% inteligente e adapt√°vel")
    
    print(f"\nüõ°Ô∏è PROTE√á√ïES ANTI-ALUCINA√á√ÉO:")
    print(f"   ‚úÖ Valida√ß√£o de informa√ß√µes oficiais")
    print(f"   ‚úÖ Detec√ß√£o de palavras proibidas: {len(PALAVRAS_PROIBIDAS)}")
    print(f"   ‚úÖ Detec√ß√£o de padr√µes suspeitos: {len(PADROES_SUSPEITOS)}")
    print(f"   ‚úÖ Limpeza autom√°tica de alucina√ß√µes")
    print(f"   ‚úÖ Verifica√ß√£o de pre√ßos corretos")
    print(f"   ‚úÖ Verifica√ß√£o de WhatsApp correto")
    print(f"   ‚úÖ Verifica√ß√£o de nome do criador")
    print(f"   ‚úÖ Bloqueio de projetos inventados")
    
    print(f"\nüí¨ CONVERSA√á√ÉO NATURAL:")
    print(f"   ‚úÖ Responde perguntas casuais com empatia")
    print(f"   ‚úÖ Bate papo amig√°vel e descontra√≠do")
    print(f"   ‚úÖ N√£o for√ßa informa√ß√µes de servi√ßos")
    print(f"   ‚úÖ Transi√ß√µes naturais quando relevante")
    
    print(f"\nüìä INFORMA√á√ïES DOS SERVI√áOS:")
    print(f"   ‚Ä¢ Planos: Starter (R$ 39,99/m√™s) | Professional (R$ 79,99/m√™s)")
    print(f"   ‚Ä¢ Projetos entregues: {len(INFORMACOES_OFICIAIS['projetos'])}")
    print(f"   ‚Ä¢ Desenvolvimento base: 3-4 horas")
    print(f"   ‚Ä¢ Projeto completo: 1-2 semanas")
    
    print(f"\nüöÄ SERVIDOR INICIANDO...")
    print(f"   ‚Ä¢ Porta: 5000")
    print(f"   ‚Ä¢ Host: 0.0.0.0")
    print(f"   ‚Ä¢ Debug: False")
    print(f"   ‚Ä¢ Threaded: True")
    
    print("\n" + "="*80)
    print("üìû CONTATO: WhatsApp (21) 99282-6074")
    print("üåê SITE: natansites.com.br")
    print("üíº PORTF√ìLIO: natandev02.netlify.app")
    print("="*80 + "\n")
    
    app.run(
        host='0.0.0.0',
        port=5000,
        debug=False,
        threaded=True
    )
